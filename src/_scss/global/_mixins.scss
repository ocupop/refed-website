@mixin transition($duration: 0.3s, $property: all, $effect: ease-in-out) {
  transition: $property $duration $effect;
}

@mixin animation($effect: fadeIn, $duration: 0.5s, $delay: 0s) {
  animation-name: $effect;
  animation-duration: $duration;
  animation-fill-mode: both;
  animation-delay: ($delay);
}

@mixin make-responsive-cards($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints

  display: flex;
  flex-flow: row wrap;
  margin-right: $gutter / 2;
  margin-left: $gutter / 2;

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .card {
      flex: 0 0 calc(100% - #{$grid-gutter-width});
      margin-left: $gutter / 2;
      margin-right: $gutter / 2;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        &.cards#{$infix}-#{$i} {
          .card {
            flex: 0 0 calc(#{100 / $i}% - #{$grid-gutter-width});
            margin-left: $gutter / 2;
            margin-right: $gutter / 2;
          }
        }
      }
    }
  }
}

// TODO: Confirm the use of the arrow mixin.
/*  ARROW WITH FOUR OPTIONAL DIRECTIONS  */
@mixin arrow($direction: down, $size: 5px, $color: #555) {
  width: 0;
  height: 0;
  display: inline-block;
  @if ($direction == left) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: ($size * 1.5) solid $color;
  } @else if ($direction == right) {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: ($size * 1.5) solid $color;
  } @else if ($direction == down) {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: ($size * 1.5) solid $color;
  } @else {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: ($size * 1.5) solid $color;
  }
}

.left-nav-arrow {
  @include arrow($direction: left, $size: 10px, $color: $white);
  width: 0;
  border-right: 17px solid $white;
  display: inline-block;
  vertical-align: -2px;
}

@mixin darken-bkg-image($opacity: 0.67, $color: $gray-900) {
  position: relative;
  &:before {
    content: "";
    background-color: $color;
    opacity: $opacity;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }
}

@mixin icon-variant($parent, $slug, $color, $ignore-warning: false) {
  #{$parent} {
    background-color: $color !important;
    background-image: url('/img/icons/#{$slug}.svg');
    background-size: contain;
    background-position: center center;
  }
  a#{$parent},
  button#{$parent} {
    @include hover-focus() {
      background-color: darken($color, 10%) !important;
    }
  }
}
